>> g = -9.80 ; % gravitational acceleration
>> initial_velocity = 100 ;
>> initial_angle = 60 ;
>> Vox = initial_velocity * cosd(initial_angle) ;
>> Voy = initial_velocity * sind(initial_angle) ;
>> time_to_top = -Voy/g %given by rearranging v = at

time_to_top =

    8.8370

>> max_height = 0.5*g*time_to_top^2 + Voy*time_to_top %maximum height reached given by 0.5at^2 + vt

max_height =

  382.6531

>> height = [0 150 300 400] ; %when we solve for time at y = 400, we will get a complex value as the parabola does not intersect this height (no real solutions at this y-value)
>> A = g / 2 ; %represents coefficient of time_to_top^2 of quadratic in standard form
B = Voy ; %represents coefficient of time_to_top of quadratic in standard form
C = -height ; %represents constant term of quadratic in standard form
>> time_1=(-B+sqrt(B^2-4*A*C))/(2*A) %positive root

time_1 =

   0.0000 + 0.0000i   1.9464 + 0.0000i   4.7299 + 0.0000i   8.8370 - 1.8815i

>> %last value complex because there is no real value for x at the given y-value (negative root when calculating B^2 - 4*A*C
>> time_2 = (-B-sqrt(B^2-4*A*C))/(2*A) %negative root

time_2 =

  17.6740 + 0.0000i  15.7276 + 0.0000i  12.9441 + 0.0000i   8.8370 + 1.8815i

>> time_1(1:3)

ans =

         0    1.9464    4.7299

>> rtime_1 = time_1(1:3) ;
>> rtime_2 = time_2(1:3) ; %remove complex parts/answers from the time values
>> x2_minus_x1 = (rtime_2 - rtime_1) * Vox

x2_minus_x1 =

  883.6994  689.0589  410.7064

>> time = [rtime_1 rtime_2] 

time =

         0    1.9464    4.7299   17.6740   15.7276   12.9441

>> time .* time

ans =

         0    3.7885   22.3722  312.3698  247.3569  167.5486

>> y = 0.5*g*time.*time + Voy*time

y =

         0  150.0000  300.0000         0  150.0000  300.0000

>> % this ^ is a vectorized calculation of all the y-values by using the matrix multiplication to square each time in place
>> x = Vox*time

x =

         0   97.3202  236.4965  883.6994  786.3791  647.2029

>> figure(1)
>> plot(x,y,'o')
>> xlabel('Distance(m)'); ylabel('Height(m)') %Label the axes
>> N=0:100;
>> max_time = max(time) %find the maximum value in the time array and store as a variable

max_time =

   17.6740

>> TIME = N*max_time/100 ; 
>> XX = TIME * Vox %distance = speed * time (classic)

XX =

  Columns 1 through 8

         0    8.8370   17.6740   26.5110   35.3480   44.1850   53.0220   61.8590

  Columns 9 through 16

   70.6960   79.5329   88.3699   97.2069  106.0439  114.8809  123.7179  132.5549

  Columns 17 through 24

  141.3919  150.2289  159.0659  167.9029  176.7399  185.5769  194.4139  203.2509

  Columns 25 through 32

  212.0879  220.9248  229.7618  238.5988  247.4358  256.2728  265.1098  273.9468

  Columns 33 through 40

  282.7838  291.6208  300.4578  309.2948  318.1318  326.9688  335.8058  344.6428

  Columns 41 through 48

  353.4798  362.3168  371.1537  379.9907  388.8277  397.6647  406.5017  415.3387

  Columns 49 through 56

  424.1757  433.0127  441.8497  450.6867  459.5237  468.3607  477.1977  486.0347

  Columns 57 through 64

  494.8717  503.7087  512.5456  521.3826  530.2196  539.0566  547.8936  556.7306

  Columns 65 through 72

  565.5676  574.4046  583.2416  592.0786  600.9156  609.7526  618.5896  627.4266

  Columns 73 through 80

  636.2636  645.1006  653.9375  662.7745  671.6115  680.4485  689.2855  698.1225

  Columns 81 through 88

  706.9595  715.7965  724.6335  733.4705  742.3075  751.1445  759.9815  768.8185

  Columns 89 through 96

  777.6555  786.4925  795.3295  804.1664  813.0034  821.8404  830.6774  839.5144

  Columns 97 through 101

  848.3514  857.1884  866.0254  874.8624  883.6994

>> YY = 0.5*g*TIME.^2 + Voy*TIME ; 
>> figure(2)
>> plot(TIME,XX,TIME,YY) %plot both XX and YY on the same plot
>> xlabel('Time(s)'); ylabel('Height and Distance(m)') %label the x and y axes
>> figure(3) ; % new figure
>> plot(XX,YY,'-',x,y,'o') ;
>> xlabel('Distance(m)') ; ylabel('Height(m)')
>> title('Charles Daigle - Trajectory for Vo=100 m/s, angle=60 degrees')